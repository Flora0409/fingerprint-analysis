// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "imgscan.h"

/////////////////////////////////////////////////////////////////////////////
// CImgScan

IMPLEMENT_DYNCREATE(CImgScan, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CImgScan properties

CString CImgScan::GetImage()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CImgScan::SetImage(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CImgScan::GetDestImageControl()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CImgScan::SetDestImageControl(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

BOOL CImgScan::GetScroll()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CImgScan::SetScroll(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CImgScan::GetStopScanBox()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CImgScan::SetStopScanBox(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

long CImgScan::GetPage()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CImgScan::SetPage(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CImgScan::GetPageOption()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CImgScan::SetPageOption(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CImgScan::GetPageCount()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CImgScan::SetPageCount(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CImgScan::GetStatusCode()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CImgScan::SetStatusCode(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long CImgScan::GetFileType()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CImgScan::SetFileType(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

BOOL CImgScan::GetMultiPage()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CImgScan::SetMultiPage(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

long CImgScan::GetScanTo()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CImgScan::SetScanTo(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

float CImgScan::GetZoom()
{
	float result;
	GetProperty(0xf, VT_R4, (void*)&result);
	return result;
}

void CImgScan::SetZoom(float propVal)
{
	SetProperty(0xf, VT_R4, propVal);
}

BOOL CImgScan::GetShowSetupBeforeScan()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CImgScan::SetShowSetupBeforeScan(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CImgScan operations

long CImgScan::OpenScanner()
{
	long result;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImgScan::StartScan()
{
	long result;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImgScan::CloseScanner()
{
	long result;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CImgScan::ScannerAvailable()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CImgScan::ShowSelectScanner()
{
	long result;
	InvokeHelper(0x69, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImgScan::StopScan()
{
	long result;
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImgScan::ResetScanner()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImgScan::ShowScanNew(const VARIANT& Modal)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&Modal);
	return result;
}

long CImgScan::ShowScanPage(const VARIANT& Modal)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&Modal);
	return result;
}

long CImgScan::ShowScanPreferences()
{
	long result;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImgScan::GetPageTypeCompressionType(long ImageType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ImageType);
	return result;
}

long CImgScan::GetPageTypeCompressionInfo(long ImageType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ImageType);
	return result;
}

long CImgScan::GetCompressionPreference()
{
	long result;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CImgScan::SetPageTypeCompressionOpts(long CompPref, long ImageType, long CompType, long CompInfo)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		CompPref, ImageType, CompType, CompInfo);
	return result;
}

void CImgScan::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
